## Aula 1 - Conhecendo os dados

#### Projeto do curso

Nós estamos trabalhando em um projeto de uma empresa de People Analytics chamada Tech Safe.

O nosso objetivo principal será realizar uma análise exploratória e responder perguntas levantadas pela Tech Safe.

Ao longo do curso iremos responder diversas perguntas sobre os dados fornecidos pela empresa.

Para isso, vamos utilizar a linguagem de programação R.

### Projeto da aula

A primeira tabela que vamos criar, será a de Colaboradores. Nessa tabela, teremos informações como: Nome, Idade, Salário, Telefone Fixo e Trabalho Remoto.

Segue abaixo a tabela que a Tech passou para trabalharmos:

| Nome            | Idade | Salário | Telefone Fixo    | Trabalho Remoto |
|-----------------|-------|---------|------------------|-----------------|
| Ana Silva       | 28    | 6230.50 | Não possui       | Sim             |
| Carlos Oliveira | 35    | 7500.75 | \(11\) 1234-5678 | Sim             |
| Maria Santos    | 40    | 8000.25 | \(21\) 9876-5432 | Não             |
| João Costa      | 32    | 2460.80 | Não possui       | Sim             |
| Fernanda Lima   | 27    | 4230.35 | \(31\) 8765-4321 | Sim             |

```{r}
ana_silva <- c('Ana Silva', 28, 6230.50, 'Não possui', TRUE)
carlos_oliveira <- c('Carlos Oliveira', 35, 7500.75, '(11) 1234-5678', TRUE)
maria_santos <- c('Maria Santos', 40, 8000.25, '(21) 9876-5432', TRUE)
joao_costa <- c('Joao Costa', '32', 2460.80, 'Não possui', FALSE)
fernanda_lima <- c('Fernanda Lima', 27, 4230.35, '(31) 8765-4321', TRUE)
```

Para criar uma matriz no R, usamos uma função chamada `matrix()` que leva quatro argumentos:

1.  `vector`: os dados que vamos usar para criar essa matriz;

2.  `nrow`: o número de linhas que vamos utilizar nessa matriz;

3.  `ncol`: o número de colunas que vamos utilizar nessa matriz;

4.  `byrow` (campo opcional): diz se queremos criar essa matriz por linha ou por coluna. Se for verdadeiro, é por linha. Se for falso, é por coluna.

    ```{r}
    colab_combinado <- c(ana_silva, carlos_oliveira, maria_santos, joao_costa, fernanda_lima)

    ```

    ```{r}
    matriz_colab <- matrix(colab_combinado, nrow = 5, byrow = TRUE)
    matriz_colab

    ```

```{r}
rownames(matriz_colab) <- c('Colaboradora Ana', 'Colaborador Carlos', 'Colaboradora Maria', 'Colaborador Joao', 'Colaboradora Fernanda')
```

```{r}
colnames(matriz_colab) <- c('Nome','Idade','Salário','Telefone','Trabalho remoto')

matriz_colab
```

## Aula 2 - Manipulando os

```{r}

```

## dados

```{r}

```

### Projeto da aula

Nesta aula, vamos utilizar uma tabela de vendas, contendo os valores das vendas de 5 colaboradores referentes a 6 meses de vendas.

```{r}
# Vetor com valores das vendas
vendas_jan <- c(20, 18, 25, 16, 23)
vendas_fev <- c(15, 20, 22, 18, 19)
vendas_mar <- c(25, 23, 20, 17, 21)
vendas_abr <- c(18, 15, 19, 20, 24)
vendas_mai <- c(22, 25, 21, 15, 18)
vendas_jun <- c(21, 22, 19, 17, 20)
```

```{r}
# Nomes das pessoas
pessoas <- c("Pedro Santos", "Carla Nunes", "Maria Eduarda", "Luiz Felipe", "Julio Costa")

# Nomes dos meses
meses <- c("Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho")
```

```{r}
# Combinar as vendas
vendas_semestre <- c(vendas_jan, vendas_fev, vendas_mar, vendas_abr, vendas_mai, vendas_jun)

# Vendas de cada pessoa por mês (em milhares)
matriz_vendas <- matrix(vendas_semestre, nrow = 5, byrow = FALSE)
```

```{r}
# Nomear a matriz
rownames(matriz_vendas) <- pessoas
colnames(matriz_vendas) <- meses
```

```{r}
# Exibir a matriz
matriz_venda
```

-   

    ```{r}
    vendas_jan
    ```

```{r}
vendas_jan[3]
```

```{r}
matriz_vendas
```

```{r}
matriz_vendas[4, ]
```

```{r}
matriz_vendas['Luiz Felipe',]
```

Vamos tentar descobrir o seguinte:

-   Qual colaborador teve o maior faturamento nas vendas?

    ```{r}
    rowSums(matriz_vendas)
    ```

-   Qual mês teve maior faturamento?

```{r}
colSums(matriz_vendas)
```

```{r}
total_colab <- rowSums(matriz_vendas)

matriz_total_colab <- cbind(matriz_vendas, total_colab)
matriz_total_colab
```

```{r}
total_meses <- colSums(matriz_vendas)

matriz_total_meses <- rbind(matriz_vendas, total_meses)
matriz_total_meses
```

## Aula 3 - Estruturas condicionais e de repetição

### Projeto da aula

Suponha que estamos lidando com dados de um armazém que vende produtos eletrônicos e tem um estoque representado por uma matriz de preços unitários e quantidades em estoque.

```{r}
preco <- c(50, 100, 150, 25, 75)

qtd_estoque <- c(10, 5, 20, 30, 7)

preco_estoque <- c(preco, qtd_estoque)

matriz_estoque <- matrix(preco_estoque, ncol = 2)

rownames(matriz_estoque) <- c('Notebook', 'Tablet', 'Monitor', 'Smartphone', 'Headset')
colnames(matriz_estoque) <- c('Produto', 'Estoque')

matriz_estoque
```

A partir dessa matriz, vamos buscar descobrir o seguinte:

-   Calcular o valor total em estoque.

```{r}
total_estoque <- matriz_estoque[, 1] * matriz_estoque[, 2]

total_estoque
```

```{r}
matriz_estoque <- cbind(matriz_estoque, total_estoque)

matriz_estoque
```

-   

-   Identificar produtos com estoque baixo (menos de 15 unidades).

```{r}
estoque_baixo <- matriz_estoque[ , 2] < 15

matriz_estoque[estoque_baixo, ]

```

-   Classificar o valor total em estoque em alto ou baixo.

```{r}
total_somado <- colSums(matriz_estoque)
total_somado
```

```{r}
if(total_somado[3] > 3000) {
  paste('Total em estoque é alto. Valor total: ', total_somado[3])
} else {
    paste('Total em estoque está abaixo de 3000. Valor total: ', total_somado[3])
}
```

-   Aplicar desconto de 10% em todos os produtos do estoque.

```{r}
for (i in 1:nrow(matriz_estoque)) {
    matriz_estoque[i, 1] <- matriz_estoque[i, 1] * 0.9
}

matriz_estoque
```

-   Descobrir qual o produto mais vendido.

```{r}
indice_mais_vendido <- 0
quantidade_mais_vendida <- 0
i <- 1

while (i <= nrow(matriz_estoque) & quantidade_mais_vendida < 30) {
    if (matriz_estoque[i, 2] > quantidade_mais_vendida) {
        quantidade_mais_vendida <- matriz_estoque[i, 2]
        indice_mais_vendido <- i
    }
    i <- i + 1
}

cat('Produto mais vendido: ', indice_mais_vendido)
cat('\nTotal em estoque: ', matriz_estoque[indice_mais_vendido, 2])
```

## Aula 4 - Funções matemáticas e estatísticas

### Projeto da aula

Vamos criar uma nova matriz de vendas. Dessa vez, vamos incluir a receita das vendas na matriz.

```{r}
dados_vendas <- matrix(c(
  1230.75, 20, 24615, 840.46, 35, 29416.10,
  110.20, 15, 1653, 519.67, 10, 5196.70, 650.90, 25, 16272.50

), ncol = 3, byrow = TRUE)

colnames(dados_vendas) <- c("Preco", "Quantidade", "Valor Total")
rownames (dados_vendas) <- c("Laptop", "Smart TV", "Webcam", "Microfone", "Smartwatch")

dados_vendas
```

A partir dessa matriz, vamos responder às seguintes :

-   Quantos produtos com preço acima de 600 foram vendidos?

    ```{r}
    dados_filtrados <- dados_vendas[dados_vendas[, 1] > 600, ]

    dados_filtrados
    ```

    ```{r}
    dados_filtados <- dados_vendas [dados_vendas[, 1]> 600,]

    qtd_filtrado <- sum(dados_filtados[, 2])

    qtd_filtrado
    ```

    ```{r}
    qtd_total <- sum(dados_vendas[, 2])

    resultado_porcentagem <- (qtd_filtrado / qtd_total) * 100

    resultado_porcentagem
    ```

    ```{r}
    round(resultado_porcentagem)
    ```

-   Qual a receita média das vendas?

    ```{r}
    dados_vendas[, 3]
    ```

```{r}
mean(dados_vendas[, 3])
```

```{r}
median(dados_vendas[, 3])
```

-   Existe uma diferença muito grande entre a média e a mediana das receitas?

-   Qual o produto mais caro e qual o mais barato?

```{r}
valor_maior <- which.max(dados_vendas[, 1])
valor_maior
```

```{r}
dados_vendas[valor_maior, 1]
```

```{r}
valor_menor <- which.min(dados_vendas[, 1])
valor_menor
```

```{r}
dados_vendas[valor_menor, 1]
```

Primeiramente, vamos criar a matriz:

```{r}
dados_vendas <- matrix(c(
  1230.75, 20, 24615,
  840.46, 35, 29416.10,
  110.20, 15, 1653,
  519.67, 10, 5196.70,
  650.90, 25, 16272.50

), ncol = 3, byrow = TRUE)

rownames(dados_vendas) <- c('Ar Condicinado', 'Cama', 'Mesa', 'Refrigerador', 'Sofa')
colnames(dados_vendas) <- c("Preco", "Quantidade", "Receita")

dados_vendas
```

## Aula 5 - Fatores

### Projeto da aula

Suponha que você tenha um conjunto de dados que representa o status de entrega de diferentes produtos.

```{r}
status_entrega <- c("Entregue", "Em Trânsito", "Pendente", "Entregue", "Em Trânsito")

nomes_produtos <- c("Smartphone", "Notebook", "Monitor", "Mouse", "Tablet")

names(status_entrega) <- nomes_produtos

status_entrega
```

```{r}
fator_entrega <- factor(status_entrega)

fator_entrega
```

```{r}
fator_entrega <- factor(status_entrega, ordered = TRUE, levels = c('Em Trânsito', 'Pendente', 'Entregue'))

fator_entrega
```

```{r}
levels(fator_entrega) <- c('Pendente', 'Em Trânsito', 'Entregue')

fator_entrega
```

```{r}
fator_entrega[3]
```

```{r}
fator_entrega[3] > fator_entrega[4]
```

```{r}
prioridade <- fator_entrega %in% c('Pendente', 'Em Transito')

prioridade
```

```{r}
fator_entrega[prioridade]
```

```{r}
prioridade <- fator_entrega %in% c('Pendente', 'Em Trânsito')

prioridade
```

```{r}
fator_entrega[prioridade]
```

```{r}
cont_pendente <- sum(fator_entrega == 'Pendente')

cont_transito <- sum(fator_entrega == 'Em Trânsito')

cont_entregue <- sum(fator_entrega == 'Entregue')

cont_pendente
cont_transito
cont_entregue
```
